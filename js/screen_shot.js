// Generated by CoffeeScript 1.6.3
var ScreenShot;

ScreenShot = (function() {
  var elements, gCxt, imgConf, _create, _getCutData, _getImgUrl, _init, _invokeJqueryPlugs, _restrictDragPos, _setView;
  gCxt = elements = imgConf = null;
  _init = function(conf) {
    elements = _create(conf.root, conf.getImgUrl);
    gCxt = elements.canvas.getContext('2d');
    gCxt.fillStyle = 'transparent';
    setTimeout(function() {
      _invokeJqueryPlugs(conf.root);
    }, 2000);
  };
  _invokeJqueryPlugs = function(root) {
    $('#drag').draggable({
      drag: function() {
        _setView(_getCutData(this));
        return _restrictDragPos(this, root);
      }
    });
    $('#drag').resizable({
      minWidth: 100,
      minHeight: 100,
      maxWidth: imgConf.width - 2,
      maxHeight: imgConf.height - 2,
      resize: function() {
        return _setView(_getCutData(this));
      }
    });
  };
  _getCutData = function(drag) {
    var dh, dw, item, left, sh, sw, sx, sy, top, _ref, _ref1, _ref2, _ref3;
    item = $(drag);
    _ref = item.position(), left = _ref.left, top = _ref.top;
    _ref1 = {
      sw: item.width(),
      sh: item.height()
    }, sw = _ref1.sw, sh = _ref1.sh;
    _ref2 = {
      sx: left - imgConf.left,
      sy: top - imgConf.top
    }, sx = _ref2.sx, sy = _ref2.sy;
    _ref3 = {
      dw: elements.canvas.width,
      dh: elements.canvas.height
    }, dw = _ref3.dw, dh = _ref3.dh;
    return {
      img: imgConf.img,
      sx: sx / imgConf.width * imgConf.orgWidth,
      sy: sy / imgConf.height * imgConf.orgHeight,
      sw: sw / imgConf.width * imgConf.orgWidth,
      sh: sh / imgConf.height * imgConf.orgHeight,
      dx: 0,
      dy: 0,
      dw: dw,
      dh: dh
    };
  };
  _setView = function(conf) {
    if (conf.sx >= 0 && conf.sy >= 0) {
      gCxt.clearRect(0, 0, conf.dw, conf.dh);
      gCxt.drawImage(conf.img, conf.sx, conf.sy, conf.sw, conf.sh, conf.dx, conf.dy, conf.dw, conf.dh);
    }
  };
  _getImgUrl = function(callback) {
    var src, _base;
    if (typeof (_base = elements.canvas).toDataURL === "function" ? _base.toDataURL() : void 0) {
      element.canvas.toDataURL();
      src = elements.canvas.toDataURL('image/png');
      $('#cuted').attr('src', src);
      if (typeof callback === "function") {
        callback(src);
      }
      return src;
    }
  };
  _restrictDragPos = function(drag, root) {
    var height, item, left, top, width, _ref, _ref1;
    item = $(drag);
    _ref = item.position(), left = _ref.left, top = _ref.top;
    _ref1 = {
      width: item.width(),
      height: item.height()
    }, width = _ref1.width, height = _ref1.height;
    if (left < imgConf.left) {
      item.css({
        left: imgConf.left + 5
      });
      return false;
    }
    if (top < imgConf.top) {
      item.css({
        top: imgConf.top + 5
      });
      return false;
    }
    if (left + width > imgConf.left + imgConf.width) {
      item.css({
        left: left - ((left + width) - (imgConf.left + imgConf.width)) - 7
      });
      return false;
    }
    if (top + height > imgConf.top + imgConf.height) {
      item.css({
        top: top - ((top + height) - (imgConf.top + imgConf.height)) - 7
      });
      return false;
    }
    return true;
  };
  _create = function(id, getImgUrl) {
    var canvas, clipBtn, img, root;
    root = $(id).css({
      position: 'relative',
      lineHeight: $(id).height() + 'px'
    });
    canvas = $('<canvas>').css({
      float: 'left',
      width: '200px',
      height: '200px',
      float: 'right'
    });
    clipBtn = $('<input type="button" value="裁剪">').css({
      display: 'block'
    });
    clipBtn.click(function() {
      _getImgUrl(getImgUrl);
    });
    img = $('<img>').attr('src', 'images/5.jpg');
    img.attr('id', 'source-image');
    img.bind('load', function() {
      var drag, left, orgHeight, orgWidth, top, _ref, _ref1;
      _ref = {
        orgWidth: $(this).width(),
        orgHeight: $(this).height()
      }, orgWidth = _ref.orgWidth, orgHeight = _ref.orgHeight;
      imgConf = {
        img: this,
        orgWidth: orgWidth,
        orgHeight: orgHeight
      };
      $(this).css({
        width: '400px',
        height: 'auto',
        verticalAlign: 'middle'
      });
      _ref1 = $(this).position(), left = _ref1.left, top = _ref1.top;
      $.extend(imgConf, {
        left: left,
        top: top,
        width: $(this).width(),
        height: $(this).height()
      });
      drag = $('<div>').attr('id', 'drag').css({
        position: 'absolute',
        width: '100px',
        height: '100px',
        left: left + 5 + 'px',
        top: top + 5 + 'px',
        cursor: 'move',
        border: '3px dotted #fff',
        backgroundColor: 'rgba( 255, 255, 255, 0 )'
      });
      drag.addClass("drag");
      root.append(drag);
    });
    root.append(img);
    root.before(canvas, clipBtn);
    if ($.browser.msie && $.browser.version < 9) {
      canvas = window.G_vmlCanvasManager.initElement(canvas.get(0));
    } else {
      canvas = canvas.get(0);
    }
    return {
      canvas: canvas
    };
  };
  return {
    init: _init
  };
})();
